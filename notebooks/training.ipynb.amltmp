{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append('../src/')"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1733293741706
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from train import *"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1733293780623
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Main script\n",
        "if __name__ == \"__main__\":\n",
        "    # Paths and configurations\n",
        "    DATA_PATH = \"../data/energy_data/input_data/energy_data.csv\"\n",
        "    PREDICTION_FILE = \"../data/energy_data/input_data/prediction_data.csv\"\n",
        "    WORKSPACE_CONFIG = \"./config.json\"\n",
        "    EXPERIMENT_NAME = \"energy-requirement-prediction\"\n",
        "\n",
        "    # Step 1: Data Preparation\n",
        "    data_prep = DataPreparation(DATA_PATH)\n",
        "    df = data_prep.load_data()\n",
        "    X, y = data_prep.preprocess_data(df)\n",
        "    X_train, X_test, y_train, y_test = data_prep.split_data(X, y)\n",
        "\n",
        "    # Step 2: Save prediction data\n",
        "    DataSaver.save_data(X_test, PREDICTION_FILE)\n",
        "\n",
        "    # Step 3: Experimentation\n",
        "    models = {\n",
        "        \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=44),\n",
        "        \"Logistic Regression\": LogisticRegression(max_iter=200, random_state=44),\n",
        "        \"Decision Tree\": DecisionTreeClassifier(random_state=44),\n",
        "        \"Support Vector Machine\": SVC(probability=True, random_state=44)\n",
        "    }\n",
        "\n",
        "    experiment_manager = ExperimentManager(EXPERIMENT_NAME, WORKSPACE_CONFIG)\n",
        "    experiment_manager.train_and_log_models(models, X_train, y_train, X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Data loaded successfully from ../data/energy_data/input_data/energy_data.csv\nData preprocessing completed.\nData split into training and testing sets.\nPrediction data saved at: ../data/energy_data/input_data/prediction_data.csv\nExperiment 'energy-requirement-prediction' is set up in MLflow.\nTraining and logging model: Random Forest\nModel: Random Forest, Metrics: {'accuracy': 0.95, 'precision': 0.9431818181818182, 'recall': 0.9431818181818182, 'f1_score': 0.9431818181818182}\nTraining and logging model: Logistic Regression\nModel: Logistic Regression, Metrics: {'accuracy': 0.835, 'precision': 0.8089887640449438, 'recall': 0.8181818181818182, 'f1_score': 0.8135593220338984}\nTraining and logging model: Decision Tree\nModel: Decision Tree, Metrics: {'accuracy': 0.895, 'precision': 0.8850574712643678, 'recall': 0.875, 'f1_score': 0.88}\nTraining and logging model: Support Vector Machine\nModel: Support Vector Machine, Metrics: {'accuracy': 0.92, 'precision': 0.9090909090909091, 'recall': 0.9090909090909091, 'f1_score': 0.9090909090909091}\nExperiment 'energy-requirement-prediction' completed. Check Azure ML Studio for results.\n"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages/azureml/mlflow/_protos/aml_service_pb2.py:10: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025\n  from google.protobuf import service as _service\n2024/12/04 06:30:09 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\n2024/12/04 06:30:19 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\n2024/12/04 06:30:27 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\n2024/12/04 06:30:34 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1733293838127
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}